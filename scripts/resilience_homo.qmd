---
title: "resilience_homo"
format: html
editor: visual
---

```{r}
library(broom)
library(cowplot)
# library(magrittr)
library(qiime2R)
library(tidyverse)
```

```{r}
metadata_fixer <- function(metadata_fp) {
  tmpMeta <- read_tsv(metadata_fp, n_max = 2)
  mycols <- colnames(tmpMeta)
  metadata <- read_tsv(metadata_fp, skip = 2, col_names = mycols)
  names(metadata)[names(metadata) == '#SampleID'] <- 'sampleid'
  metadata %>% 
    filter(!is.na(diet)) %>% 
    mutate(day_post_inf = if_else(day_post_inf == 2, 3, day_post_inf)) %>% 
    mutate(diet = as.factor(diet)) -> metadata
  return(metadata)
}
```

Load in datums

```{r}
metadata_FP <- '../data/misc/merged_metadata1.tsv'
uu_dist_fp <- '../data/qiime/core_outputs/uw_dist_matrix.tsv'
wu_dist_fp <- '../data/qiime/core_outputs/w_dist_matrix.tsv'

meta <- metadata_fixer(metadata_fp = metadata_FP)
uu_dist <- read_tsv(uu_dist_fp)
wu_dist <- read_tsv(wu_dist_fp)
```

**Putting together functions for resiliency plot**

```{r}
diets <- unique(meta$diet)

## this function combines your metadata file and your distance matrix 
## it also pulls out the wanted diet variable from the metadata file 
dist_filter <- function(dist_mat, meta, mydiet){
  meta %>% 
    filter(diet == mydiet) -> min_meta

  dist_mat <- data.frame(dist_mat)
  rownames(dist_mat) <- dist_mat[,1]
  dist_mat <- dist_mat[,-1]
  
  sample_idx <- rownames(dist_mat) %in% min_meta$sampleid 
  
  min_dist_mat <- dist_mat[sample_idx, sample_idx]
  min_dist_mat <- as_tibble(min_dist_mat, rownames = 'sampleid')
  colnames(min_dist_mat)[2:ncol(min_dist_mat)] <- min_dist_mat$sampleid
  return(min_dist_mat)
}

## this function takes the output from dist_filter and the metadata file 
## and pulls all unique distance matrix comparisons out for that particular diet 
## and places them in a new column 
## it also esta the baseline that all sample pairs will be compared to 
resil_dist_comp <- function(min_dist_mat, meta){
  meta %>% 
    select(sampleid, diet, day_post_inf) -> min_meta
  
  min_dist_mat %>% 
    rename(sampleid_x = sampleid) %>% 
    gather(-sampleid_x, key = sampleid_y, value = dist) %>% 
    merge(min_meta, by.x = 'sampleid_x', by.y = 'sampleid') %>% 
    merge(min_meta, by.x = 'sampleid_y', by.y = 'sampleid') -> long_dist_mat
  
  long_dist_mat %>% 
    mutate(key = paste0(pmin(sampleid_x, sampleid_y), 
                        pmax(sampleid_x, sampleid_y), 
                        sep = "_")) %>% 
    distinct(key, .keep_all = TRUE) %>% 
    filter(sampleid_x != sampleid_y,
           ## for homogenicity testing, do day_post_inf.x == day_post_inf.y 
           ## and don't filter out day -15 
           day_post_inf.x == -8,
           day_post_inf.y > -8) %>% 
    select(-diet.y) %>% 
    rename(diet = diet.x) -> long_dist_mat
  
  return(long_dist_mat)
}

## this is a for loop that does the above analysis for each diet variable and places them 
## in a list of dataframes that can be bound together to create one plot for comparison 
resil <- list()
for (i in 1:length(diets)){
  tmp_dist_mat <- dist_filter(uu_dist, meta, diets[i])
  tmp_resil <- resil_dist_comp(tmp_dist_mat, meta)
  resil[[i]] <- tmp_resil
}
resil <- bind_rows(resil)
```

```{r, warning=FALSE, fig.width=10, fig.height=7}
diet_labs <- 
    c('Chow', 
      'High Fat / High Fiber', 
      'High Fat / Low Fiber', 
      'Low Fat / High Fiber', 
      'Low Fat / Low Fiber')

names(diet_labs) <- c('Chow', 'HF/HF', 'HF/LF', 'LF/HF', 'LF/LF')

resil %>% 
  ggplot(aes(x = day_post_inf.y, y = dist)) +
    geom_jitter(width = 0.05) +
    geom_smooth(se = FALSE, color = 'purple') + 
    scale_x_continuous(breaks = c(-3, 0, 3)) + 
    facet_wrap(~diet, 
               labeller = labeller(diet = diet_labs)) +
    theme_bw(base_size = 14) +
    xlab('Days Relative to Infection') +
    ylab('Unweighted UniFrac Distance\n(Pairwise Distances from Day -8)') +
    ggtitle("Microbiome Resilience Over Time")
```

```{r}
resil %>% 
  group_by(day_post_inf.y) %>% 
  do(tidy(lm(dist ~ diet ,
             data = .))) %>% 
  filter(p.value <= 0.05)
```
